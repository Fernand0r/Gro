// Generated by @wagmi/cli@0.1.13 on 2023/3/21 at 16:12:19
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  useNetwork,
  Address,
}                      from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
}                      from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// QuoterV2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export const quoterV2ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_factory', internalType: 'address', type: 'address' },
      { name: '_WETH9', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH9',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'bytes', type: 'bytes' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteExactInput',
    outputs: [
      { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
      {
        name: 'sqrtPriceX96AfterList',
        internalType: 'uint160[]',
        type: 'uint160[]',
      },
      {
        name: 'initializedTicksCrossedList',
        internalType: 'uint32[]',
        type: 'uint32[]',
      },
      { name: 'gasEstimate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct IQuoterV2.QuoteExactInputSingleParams',
        type: 'tuple',
        components: [
          { name: 'tokenIn', internalType: 'address', type: 'address' },
          { name: 'tokenOut', internalType: 'address', type: 'address' },
          { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
          { name: 'fee', internalType: 'uint24', type: 'uint24' },
          {
            name: 'sqrtPriceLimitX96',
            internalType: 'uint160',
            type: 'uint160',
          },
        ],
      },
    ],
    name: 'quoteExactInputSingle',
    outputs: [
      { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
      { name: 'sqrtPriceX96After', internalType: 'uint160', type: 'uint160' },
      {
        name: 'initializedTicksCrossed',
        internalType: 'uint32',
        type: 'uint32',
      },
      { name: 'gasEstimate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'bytes', type: 'bytes' },
      { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteExactOutput',
    outputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'sqrtPriceX96AfterList',
        internalType: 'uint160[]',
        type: 'uint160[]',
      },
      {
        name: 'initializedTicksCrossedList',
        internalType: 'uint32[]',
        type: 'uint32[]',
      },
      { name: 'gasEstimate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct IQuoterV2.QuoteExactOutputSingleParams',
        type: 'tuple',
        components: [
          { name: 'tokenIn', internalType: 'address', type: 'address' },
          { name: 'tokenOut', internalType: 'address', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'fee', internalType: 'uint24', type: 'uint24' },
          {
            name: 'sqrtPriceLimitX96',
            internalType: 'uint160',
            type: 'uint160',
          },
        ],
      },
    ],
    name: 'quoteExactOutputSingle',
    outputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'sqrtPriceX96After', internalType: 'uint160', type: 'uint160' },
      {
        name: 'initializedTicksCrossed',
        internalType: 'uint32',
        type: 'uint32',
      },
      { name: 'gasEstimate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amount0Delta', internalType: 'int256', type: 'int256' },
      { name: 'amount1Delta', internalType: 'int256', type: 'int256' },
      { name: 'path', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'uniswapV3SwapCallback',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export const quoterV2Address = {
  1: '0x61fFE014bA17989E743c5F6cB21bF9697530B21e',
  5: '0x61fFE014bA17989E743c5F6cB21bF9697530B21e',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export const quoterV2Config = {
  address: quoterV2Address,
  abi: quoterV2ABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SwapRouter02
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export const swapRouter02ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_factoryV2', internalType: 'address', type: 'address' },
      { name: 'factoryV3', internalType: 'address', type: 'address' },
      { name: '_positionManager', internalType: 'address', type: 'address' },
      { name: '_WETH9', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH9',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'approveMax',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'approveMaxMinusOne',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'approveZeroThenMax',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'approveZeroThenMaxMinusOne',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
    name: 'callPositionManager',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'paths', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'amounts', internalType: 'uint128[]', type: 'uint128[]' },
      { name: 'maximumTickDivergence', internalType: 'uint24', type: 'uint24' },
      { name: 'secondsAgo', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkOracleSlippage',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'bytes', type: 'bytes' },
      { name: 'maximumTickDivergence', internalType: 'uint24', type: 'uint24' },
      { name: 'secondsAgo', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkOracleSlippage',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct IV3SwapRouter.ExactInputParams',
        type: 'tuple',
        components: [
          { name: 'path', internalType: 'bytes', type: 'bytes' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
          {
            name: 'amountOutMinimum',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'exactInput',
    outputs: [{ name: 'amountOut', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct IV3SwapRouter.ExactInputSingleParams',
        type: 'tuple',
        components: [
          { name: 'tokenIn', internalType: 'address', type: 'address' },
          { name: 'tokenOut', internalType: 'address', type: 'address' },
          { name: 'fee', internalType: 'uint24', type: 'uint24' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
          {
            name: 'amountOutMinimum',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'sqrtPriceLimitX96',
            internalType: 'uint160',
            type: 'uint160',
          },
        ],
      },
    ],
    name: 'exactInputSingle',
    outputs: [{ name: 'amountOut', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct IV3SwapRouter.ExactOutputParams',
        type: 'tuple',
        components: [
          { name: 'path', internalType: 'bytes', type: 'bytes' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
          { name: 'amountInMaximum', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'exactOutput',
    outputs: [{ name: 'amountIn', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct IV3SwapRouter.ExactOutputSingleParams',
        type: 'tuple',
        components: [
          { name: 'tokenIn', internalType: 'address', type: 'address' },
          { name: 'tokenOut', internalType: 'address', type: 'address' },
          { name: 'fee', internalType: 'uint24', type: 'uint24' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
          { name: 'amountInMaximum', internalType: 'uint256', type: 'uint256' },
          {
            name: 'sqrtPriceLimitX96',
            internalType: 'uint160',
            type: 'uint160',
          },
        ],
      },
    ],
    name: 'exactOutputSingle',
    outputs: [{ name: 'amountIn', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factoryV2',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getApprovalType',
    outputs: [
      {
        name: '',
        internalType: 'enum IApproveAndCall.ApprovalType',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct IApproveAndCall.IncreaseLiquidityParams',
        type: 'tuple',
        components: [
          { name: 'token0', internalType: 'address', type: 'address' },
          { name: 'token1', internalType: 'address', type: 'address' },
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'amount0Min', internalType: 'uint256', type: 'uint256' },
          { name: 'amount1Min', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'increaseLiquidity',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct IApproveAndCall.MintParams',
        type: 'tuple',
        components: [
          { name: 'token0', internalType: 'address', type: 'address' },
          { name: 'token1', internalType: 'address', type: 'address' },
          { name: 'fee', internalType: 'uint24', type: 'uint24' },
          { name: 'tickLower', internalType: 'int24', type: 'int24' },
          { name: 'tickUpper', internalType: 'int24', type: 'int24' },
          { name: 'amount0Min', internalType: 'uint256', type: 'uint256' },
          { name: 'amount1Min', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
        ],
      },
    ],
    name: 'mint',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'previousBlockhash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'multicall',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'multicall',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'positionManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pull',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'refundETH',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitAllowed',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitAllowedIfNecessary',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitIfNecessary',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOutMin', internalType: 'uint256', type: 'uint256' },
      { name: 'path', internalType: 'address[]', type: 'address[]' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'swapExactTokensForTokens',
    outputs: [{ name: 'amountOut', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
      { name: 'amountInMax', internalType: 'uint256', type: 'uint256' },
      { name: 'path', internalType: 'address[]', type: 'address[]' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'swapTokensForExactTokens',
    outputs: [{ name: 'amountIn', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'sweepToken',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'sweepToken',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'feeBips', internalType: 'uint256', type: 'uint256' },
      { name: 'feeRecipient', internalType: 'address', type: 'address' },
    ],
    name: 'sweepTokenWithFee',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'feeBips', internalType: 'uint256', type: 'uint256' },
      { name: 'feeRecipient', internalType: 'address', type: 'address' },
    ],
    name: 'sweepTokenWithFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount0Delta', internalType: 'int256', type: 'int256' },
      { name: 'amount1Delta', internalType: 'int256', type: 'int256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'uniswapV3SwapCallback',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'unwrapWETH9',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrapWETH9',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'feeBips', internalType: 'uint256', type: 'uint256' },
      { name: 'feeRecipient', internalType: 'address', type: 'address' },
    ],
    name: 'unwrapWETH9WithFee',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'feeBips', internalType: 'uint256', type: 'uint256' },
      { name: 'feeRecipient', internalType: 'address', type: 'address' },
    ],
    name: 'unwrapWETH9WithFee',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'wrapETH',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export const swapRouter02Address = {
  1: '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45',
  5: '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export const swapRouter02Config = {
  address: swapRouter02Address,
  abi: swapRouter02ABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link quoterV2ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function useQuoterV2(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof quoterV2Address
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContract({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quoterV2ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function useQuoterV2Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof quoterV2ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof quoterV2ABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof quoterV2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    ...config,
  } as UseContractReadConfig<typeof quoterV2ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"WETH9"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function useQuoterV2Weth9<
  TSelectData = ReadContractResult<typeof quoterV2ABI, 'WETH9'>,
>(
  config: Omit<
    UseContractReadConfig<typeof quoterV2ABI, 'WETH9', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof quoterV2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'WETH9',
    ...config,
  } as UseContractReadConfig<typeof quoterV2ABI, 'WETH9', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"factory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function useQuoterV2Factory<
  TSelectData = ReadContractResult<typeof quoterV2ABI, 'factory'>,
>(
  config: Omit<
    UseContractReadConfig<typeof quoterV2ABI, 'factory', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof quoterV2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof quoterV2ABI, 'factory', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function useQuoterV2UniswapV3SwapCallback<
  TSelectData = ReadContractResult<typeof quoterV2ABI, 'uniswapV3SwapCallback'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof quoterV2ABI,
      'uniswapV3SwapCallback',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof quoterV2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'uniswapV3SwapCallback',
    ...config,
  } as UseContractReadConfig<
    typeof quoterV2ABI,
    'uniswapV3SwapCallback',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quoterV2ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function useQuoterV2Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof quoterV2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof quoterV2ABI, string>['abi'],
        TFunctionName
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof quoterV2ABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof quoterV2ABI, TFunctionName>({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"quoteExactInput"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function useQuoterV2QuoteExactInput<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof quoterV2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof quoterV2ABI,
          'quoteExactInput'
        >['abi'],
        'quoteExactInput'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'quoteExactInput'
      }
    : UseContractWriteConfig<TMode, typeof quoterV2ABI, 'quoteExactInput'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'quoteExactInput'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof quoterV2ABI, 'quoteExactInput'>({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'quoteExactInput',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"quoteExactInputSingle"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function useQuoterV2QuoteExactInputSingle<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof quoterV2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof quoterV2ABI,
          'quoteExactInputSingle'
        >['abi'],
        'quoteExactInputSingle'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'quoteExactInputSingle'
      }
    : UseContractWriteConfig<
        TMode,
        typeof quoterV2ABI,
        'quoteExactInputSingle'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'quoteExactInputSingle'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof quoterV2ABI, 'quoteExactInputSingle'>({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'quoteExactInputSingle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"quoteExactOutput"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function useQuoterV2QuoteExactOutput<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof quoterV2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof quoterV2ABI,
          'quoteExactOutput'
        >['abi'],
        'quoteExactOutput'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'quoteExactOutput'
      }
    : UseContractWriteConfig<TMode, typeof quoterV2ABI, 'quoteExactOutput'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'quoteExactOutput'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof quoterV2ABI, 'quoteExactOutput'>({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'quoteExactOutput',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"quoteExactOutputSingle"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function useQuoterV2QuoteExactOutputSingle<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof quoterV2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof quoterV2ABI,
          'quoteExactOutputSingle'
        >['abi'],
        'quoteExactOutputSingle'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'quoteExactOutputSingle'
      }
    : UseContractWriteConfig<
        TMode,
        typeof quoterV2ABI,
        'quoteExactOutputSingle'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'quoteExactOutputSingle'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof quoterV2ABI, 'quoteExactOutputSingle'>({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'quoteExactOutputSingle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quoterV2ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function usePrepareQuoterV2Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof quoterV2ABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof quoterV2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    ...config,
  } as UsePrepareContractWriteConfig<typeof quoterV2ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"quoteExactInput"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function usePrepareQuoterV2QuoteExactInput(
  config: Omit<
    UsePrepareContractWriteConfig<typeof quoterV2ABI, 'quoteExactInput'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof quoterV2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'quoteExactInput',
    ...config,
  } as UsePrepareContractWriteConfig<typeof quoterV2ABI, 'quoteExactInput'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"quoteExactInputSingle"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function usePrepareQuoterV2QuoteExactInputSingle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof quoterV2ABI, 'quoteExactInputSingle'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof quoterV2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'quoteExactInputSingle',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quoterV2ABI,
    'quoteExactInputSingle'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"quoteExactOutput"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function usePrepareQuoterV2QuoteExactOutput(
  config: Omit<
    UsePrepareContractWriteConfig<typeof quoterV2ABI, 'quoteExactOutput'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof quoterV2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'quoteExactOutput',
    ...config,
  } as UsePrepareContractWriteConfig<typeof quoterV2ABI, 'quoteExactOutput'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quoterV2ABI}__ and `functionName` set to `"quoteExactOutputSingle"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x61fFE014bA17989E743c5F6cB21bF9697530B21e)
 */
export function usePrepareQuoterV2QuoteExactOutputSingle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof quoterV2ABI, 'quoteExactOutputSingle'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof quoterV2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: quoterV2ABI,
    address: quoterV2Address[chainId as keyof typeof quoterV2Address],
    functionName: 'quoteExactOutputSingle',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quoterV2ABI,
    'quoteExactOutputSingle'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link swapRouter02ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof swapRouter02Address
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContract({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapRouter02ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof swapRouter02ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapRouter02ABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    ...config,
  } as UseContractReadConfig<
    typeof swapRouter02ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"WETH9"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02Weth9<
  TSelectData = ReadContractResult<typeof swapRouter02ABI, 'WETH9'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapRouter02ABI, 'WETH9', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'WETH9',
    ...config,
  } as UseContractReadConfig<typeof swapRouter02ABI, 'WETH9', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"checkOracleSlippage"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02CheckOracleSlippage<
  TSelectData = ReadContractResult<
    typeof swapRouter02ABI,
    'checkOracleSlippage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof swapRouter02ABI,
      'checkOracleSlippage',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'checkOracleSlippage',
    ...config,
  } as UseContractReadConfig<
    typeof swapRouter02ABI,
    'checkOracleSlippage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"factory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02Factory<
  TSelectData = ReadContractResult<typeof swapRouter02ABI, 'factory'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapRouter02ABI, 'factory', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof swapRouter02ABI, 'factory', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"factoryV2"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02FactoryV2<
  TSelectData = ReadContractResult<typeof swapRouter02ABI, 'factoryV2'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapRouter02ABI, 'factoryV2', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'factoryV2',
    ...config,
  } as UseContractReadConfig<typeof swapRouter02ABI, 'factoryV2', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"positionManager"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02PositionManager<
  TSelectData = ReadContractResult<typeof swapRouter02ABI, 'positionManager'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof swapRouter02ABI,
      'positionManager',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'positionManager',
    ...config,
  } as UseContractReadConfig<
    typeof swapRouter02ABI,
    'positionManager',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapRouter02ABI, string>['abi'],
        TFunctionName
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, TFunctionName>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"approveMax"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02ApproveMax<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapRouter02ABI, 'approveMax'>['abi'],
        'approveMax'
      > & { address?: Address; chainId?: TChainId; functionName?: 'approveMax' }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'approveMax'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approveMax'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'approveMax'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'approveMax',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"approveMaxMinusOne"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02ApproveMaxMinusOne<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'approveMaxMinusOne'
        >['abi'],
        'approveMaxMinusOne'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'approveMaxMinusOne'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'approveMaxMinusOne'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approveMaxMinusOne'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'approveMaxMinusOne'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'approveMaxMinusOne',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"approveZeroThenMax"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02ApproveZeroThenMax<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'approveZeroThenMax'
        >['abi'],
        'approveZeroThenMax'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'approveZeroThenMax'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'approveZeroThenMax'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approveZeroThenMax'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'approveZeroThenMax'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'approveZeroThenMax',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"approveZeroThenMaxMinusOne"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02ApproveZeroThenMaxMinusOne<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'approveZeroThenMaxMinusOne'
        >['abi'],
        'approveZeroThenMaxMinusOne'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'approveZeroThenMaxMinusOne'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'approveZeroThenMaxMinusOne'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approveZeroThenMaxMinusOne'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    TMode,
    typeof swapRouter02ABI,
    'approveZeroThenMaxMinusOne'
  >({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'approveZeroThenMaxMinusOne',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"callPositionManager"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02CallPositionManager<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'callPositionManager'
        >['abi'],
        'callPositionManager'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'callPositionManager'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'callPositionManager'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'callPositionManager'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'callPositionManager'>(
    {
      abi: swapRouter02ABI,
      address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
      functionName: 'callPositionManager',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"exactInput"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02ExactInput<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapRouter02ABI, 'exactInput'>['abi'],
        'exactInput'
      > & { address?: Address; chainId?: TChainId; functionName?: 'exactInput' }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'exactInput'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'exactInput'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'exactInput'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'exactInput',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"exactInputSingle"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02ExactInputSingle<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'exactInputSingle'
        >['abi'],
        'exactInputSingle'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'exactInputSingle'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'exactInputSingle'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'exactInputSingle'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'exactInputSingle'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'exactInputSingle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"exactOutput"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02ExactOutput<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'exactOutput'
        >['abi'],
        'exactOutput'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'exactOutput'
      }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'exactOutput'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'exactOutput'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'exactOutput'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'exactOutput',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"exactOutputSingle"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02ExactOutputSingle<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'exactOutputSingle'
        >['abi'],
        'exactOutputSingle'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'exactOutputSingle'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'exactOutputSingle'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'exactOutputSingle'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'exactOutputSingle'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'exactOutputSingle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"getApprovalType"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02GetApprovalType<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'getApprovalType'
        >['abi'],
        'getApprovalType'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'getApprovalType'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'getApprovalType'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'getApprovalType'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'getApprovalType'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'getApprovalType',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"increaseLiquidity"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02IncreaseLiquidity<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'increaseLiquidity'
        >['abi'],
        'increaseLiquidity'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'increaseLiquidity'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'increaseLiquidity'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'increaseLiquidity'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'increaseLiquidity'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'increaseLiquidity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"mint"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02Mint<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapRouter02ABI, 'mint'>['abi'],
        'mint'
      > & { address?: Address; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'mint'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'mint'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"multicall"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02Multicall<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapRouter02ABI, 'multicall'>['abi'],
        'multicall'
      > & { address?: Address; chainId?: TChainId; functionName?: 'multicall' }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'multicall'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'multicall'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'multicall'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"pull"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02Pull<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapRouter02ABI, 'pull'>['abi'],
        'pull'
      > & { address?: Address; chainId?: TChainId; functionName?: 'pull' }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'pull'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pull'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'pull'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'pull',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"refundETH"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02RefundEth<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapRouter02ABI, 'refundETH'>['abi'],
        'refundETH'
      > & { address?: Address; chainId?: TChainId; functionName?: 'refundETH' }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'refundETH'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'refundETH'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'refundETH'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'refundETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"selfPermit"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02SelfPermit<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapRouter02ABI, 'selfPermit'>['abi'],
        'selfPermit'
      > & { address?: Address; chainId?: TChainId; functionName?: 'selfPermit' }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'selfPermit'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'selfPermit'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'selfPermit'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'selfPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"selfPermitAllowed"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02SelfPermitAllowed<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'selfPermitAllowed'
        >['abi'],
        'selfPermitAllowed'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'selfPermitAllowed'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'selfPermitAllowed'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'selfPermitAllowed'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'selfPermitAllowed'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'selfPermitAllowed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"selfPermitAllowedIfNecessary"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02SelfPermitAllowedIfNecessary<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'selfPermitAllowedIfNecessary'
        >['abi'],
        'selfPermitAllowedIfNecessary'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'selfPermitAllowedIfNecessary'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'selfPermitAllowedIfNecessary'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'selfPermitAllowedIfNecessary'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    TMode,
    typeof swapRouter02ABI,
    'selfPermitAllowedIfNecessary'
  >({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'selfPermitAllowedIfNecessary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"selfPermitIfNecessary"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02SelfPermitIfNecessary<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'selfPermitIfNecessary'
        >['abi'],
        'selfPermitIfNecessary'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'selfPermitIfNecessary'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'selfPermitIfNecessary'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'selfPermitIfNecessary'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    TMode,
    typeof swapRouter02ABI,
    'selfPermitIfNecessary'
  >({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'selfPermitIfNecessary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"swapExactTokensForTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02SwapExactTokensForTokens<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'swapExactTokensForTokens'
        >['abi'],
        'swapExactTokensForTokens'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'swapExactTokensForTokens'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'swapExactTokensForTokens'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'swapExactTokensForTokens'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    TMode,
    typeof swapRouter02ABI,
    'swapExactTokensForTokens'
  >({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'swapExactTokensForTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"swapTokensForExactTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02SwapTokensForExactTokens<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'swapTokensForExactTokens'
        >['abi'],
        'swapTokensForExactTokens'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'swapTokensForExactTokens'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'swapTokensForExactTokens'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'swapTokensForExactTokens'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    TMode,
    typeof swapRouter02ABI,
    'swapTokensForExactTokens'
  >({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'swapTokensForExactTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"sweepToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02SweepToken<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapRouter02ABI, 'sweepToken'>['abi'],
        'sweepToken'
      > & { address?: Address; chainId?: TChainId; functionName?: 'sweepToken' }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'sweepToken'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'sweepToken'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'sweepToken'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'sweepToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"sweepTokenWithFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02SweepTokenWithFee<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'sweepTokenWithFee'
        >['abi'],
        'sweepTokenWithFee'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'sweepTokenWithFee'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'sweepTokenWithFee'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'sweepTokenWithFee'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'sweepTokenWithFee'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'sweepTokenWithFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02UniswapV3SwapCallback<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'uniswapV3SwapCallback'
        >['abi'],
        'uniswapV3SwapCallback'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'uniswapV3SwapCallback'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'uniswapV3SwapCallback'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'uniswapV3SwapCallback'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    TMode,
    typeof swapRouter02ABI,
    'uniswapV3SwapCallback'
  >({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'uniswapV3SwapCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"unwrapWETH9"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02UnwrapWeth9<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'unwrapWETH9'
        >['abi'],
        'unwrapWETH9'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'unwrapWETH9'
      }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'unwrapWETH9'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unwrapWETH9'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'unwrapWETH9'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'unwrapWETH9',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"unwrapWETH9WithFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02UnwrapWeth9WithFee<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapRouter02ABI,
          'unwrapWETH9WithFee'
        >['abi'],
        'unwrapWETH9WithFee'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'unwrapWETH9WithFee'
      }
    : UseContractWriteConfig<
        TMode,
        typeof swapRouter02ABI,
        'unwrapWETH9WithFee'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unwrapWETH9WithFee'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'unwrapWETH9WithFee'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'unwrapWETH9WithFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"wrapETH"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function useSwapRouter02WrapEth<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof swapRouter02Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapRouter02ABI, 'wrapETH'>['abi'],
        'wrapETH'
      > & { address?: Address; chainId?: TChainId; functionName?: 'wrapETH' }
    : UseContractWriteConfig<TMode, typeof swapRouter02ABI, 'wrapETH'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'wrapETH'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof swapRouter02ABI, 'wrapETH'>({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'wrapETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"approveMax"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02ApproveMax(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'approveMax'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'approveMax',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'approveMax'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"approveMaxMinusOne"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02ApproveMaxMinusOne(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'approveMaxMinusOne'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'approveMaxMinusOne',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'approveMaxMinusOne'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"approveZeroThenMax"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02ApproveZeroThenMax(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'approveZeroThenMax'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'approveZeroThenMax',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'approveZeroThenMax'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"approveZeroThenMaxMinusOne"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02ApproveZeroThenMaxMinusOne(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof swapRouter02ABI,
      'approveZeroThenMaxMinusOne'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'approveZeroThenMaxMinusOne',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'approveZeroThenMaxMinusOne'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"callPositionManager"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02CallPositionManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof swapRouter02ABI,
      'callPositionManager'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'callPositionManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'callPositionManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"exactInput"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02ExactInput(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'exactInput'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'exactInput',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'exactInput'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"exactInputSingle"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02ExactInputSingle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'exactInputSingle'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'exactInputSingle',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'exactInputSingle'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"exactOutput"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02ExactOutput(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'exactOutput'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'exactOutput',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'exactOutput'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"exactOutputSingle"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02ExactOutputSingle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'exactOutputSingle'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'exactOutputSingle',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'exactOutputSingle'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"getApprovalType"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02GetApprovalType(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'getApprovalType'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'getApprovalType',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'getApprovalType'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"increaseLiquidity"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02IncreaseLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'increaseLiquidity'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'increaseLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'increaseLiquidity'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"mint"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"multicall"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02Multicall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'multicall'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'multicall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"pull"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02Pull(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'pull'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'pull',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'pull'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"refundETH"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02RefundEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'refundETH'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'refundETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'refundETH'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"selfPermit"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02SelfPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'selfPermit'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'selfPermit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'selfPermit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"selfPermitAllowed"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02SelfPermitAllowed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'selfPermitAllowed'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'selfPermitAllowed',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'selfPermitAllowed'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"selfPermitAllowedIfNecessary"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02SelfPermitAllowedIfNecessary(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof swapRouter02ABI,
      'selfPermitAllowedIfNecessary'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'selfPermitAllowedIfNecessary',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'selfPermitAllowedIfNecessary'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"selfPermitIfNecessary"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02SelfPermitIfNecessary(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof swapRouter02ABI,
      'selfPermitIfNecessary'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'selfPermitIfNecessary',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'selfPermitIfNecessary'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"swapExactTokensForTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02SwapExactTokensForTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof swapRouter02ABI,
      'swapExactTokensForTokens'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'swapExactTokensForTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'swapExactTokensForTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"swapTokensForExactTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02SwapTokensForExactTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof swapRouter02ABI,
      'swapTokensForExactTokens'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'swapTokensForExactTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'swapTokensForExactTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"sweepToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02SweepToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'sweepToken'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'sweepToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'sweepToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"sweepTokenWithFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02SweepTokenWithFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'sweepTokenWithFee'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'sweepTokenWithFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'sweepTokenWithFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02UniswapV3SwapCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof swapRouter02ABI,
      'uniswapV3SwapCallback'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'uniswapV3SwapCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'uniswapV3SwapCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"unwrapWETH9"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02UnwrapWeth9(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'unwrapWETH9'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'unwrapWETH9',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'unwrapWETH9'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"unwrapWETH9WithFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02UnwrapWeth9WithFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'unwrapWETH9WithFee'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'unwrapWETH9WithFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapRouter02ABI,
    'unwrapWETH9WithFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapRouter02ABI}__ and `functionName` set to `"wrapETH"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 */
export function usePrepareSwapRouter02WrapEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'wrapETH'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof swapRouter02Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: swapRouter02ABI,
    address: swapRouter02Address[chainId as keyof typeof swapRouter02Address],
    functionName: 'wrapETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapRouter02ABI, 'wrapETH'>)
}
