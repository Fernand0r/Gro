// Generated by @wagmi/cli@0.1.13 on 2023/4/6 at 14:48:05
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  Address,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BatchHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export const batchHandlerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'token_', internalType: 'address', type: 'address' },
      { name: 'wgvt_', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AlreadyHasActiveBatch' },
  { type: 'error', inputs: [], name: 'BatchIsEmpty' },
  { type: 'error', inputs: [], name: 'InvalidAmount' },
  { type: 'error', inputs: [], name: 'InvalidBatchDuring' },
  { type: 'error', inputs: [], name: 'InvestIsCancelled' },
  { type: 'error', inputs: [], name: 'NoGoingBatch' },
  { type: 'error', inputs: [], name: 'NotCurrectBatch' },
  { type: 'error', inputs: [], name: 'NotInWhiteList' },
  { type: 'error', inputs: [], name: 'WithdrawIsCancelled' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'batchId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'startTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxInvestAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'status',
        internalType: 'enum DataTypes.BatchStatus',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'CreateNewBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'batchId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdateBatchDuration',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'WhiteListAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'WhiteListRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'share',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdraw',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'batchId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCancelled',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'addWhiteList',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'batchDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'batchIds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'batchInfos',
    outputs: [
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'endTime', internalType: 'uint256', type: 'uint256' },
      { name: 'maxInvestCoinAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'status',
        internalType: 'enum DataTypes.BatchStatus',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'batchInvestInfos',
    outputs: [
      { name: 'investCoinAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'returnShareAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'batchWithdrawInfos',
    outputs: [
      { name: 'withdrawShareAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'returnCoinAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'lastInvestIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cancelInvest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'lastWithdrawIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'canelWithdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'claimCoin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'claimShare',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'claimableCoinAmounts',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'claimableShareAmounts',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'maxInvestCoinAmount_',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'createNewBatch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBatchId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getUserInvestInfo',
    outputs: [
      {
        name: '',
        internalType: 'struct DataTypes.InvestParams',
        type: 'tuple',
        components: [
          { name: 'batchId', internalType: 'uint256', type: 'uint256' },
          { name: 'investAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'isClaimed', internalType: 'bool', type: 'bool' },
          { name: 'isCancelled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getUserInvestTimes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getUserWithdrawInfo',
    outputs: [
      {
        name: '',
        internalType: 'struct DataTypes.WithdrawParams',
        type: 'tuple',
        components: [
          { name: 'batchId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'withdrawShareAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'isClaimed', internalType: 'bool', type: 'bool' },
          { name: 'isCancelled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getUserWithdrawTimes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'investInfos',
    outputs: [
      { name: 'batchId', internalType: 'uint256', type: 'uint256' },
      { name: 'investAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'isClaimed', internalType: 'bool', type: 'bool' },
      { name: 'isCancelled', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'removeWhiteList',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'contract ERC20', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newBatchDuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateBatchDuration',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'verifyAccount',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'wgvt',
    outputs: [{ name: '', internalType: 'contract ERC20', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'share', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawInfos',
    outputs: [
      { name: 'batchId', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawShareAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'isClaimed', internalType: 'bool', type: 'bool' },
      { name: 'isCancelled', internalType: 'bool', type: 'bool' },
    ],
  },
] as const

/**
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export const batchHandlerAddress = {
  4002: '0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312',
} as const

/**
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export const batchHandlerConfig = {
  address: batchHandlerAddress,
  abi: batchHandlerABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any): ReturnType<typeof useContract> {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
): ReturnType<typeof useContractRead> {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
): ReturnType<typeof useContractRead> {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link batchHandlerABI}__.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandler(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof batchHandlerAddress
  } = {} as any,
): ReturnType<typeof useContract> {
  return useContract({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof batchHandlerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof batchHandlerABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"batchDuration"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerBatchDuration<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'batchDuration'>,
>(
  config: Omit<
    UseContractReadConfig<typeof batchHandlerABI, 'batchDuration', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'batchDuration',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'batchDuration',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"batchIds"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerBatchIds<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'batchIds'>,
>(
  config: Omit<
    UseContractReadConfig<typeof batchHandlerABI, 'batchIds', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'batchIds',
    ...config,
  } as UseContractReadConfig<typeof batchHandlerABI, 'batchIds', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"batchInfos"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerBatchInfos<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'batchInfos'>,
>(
  config: Omit<
    UseContractReadConfig<typeof batchHandlerABI, 'batchInfos', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'batchInfos',
    ...config,
  } as UseContractReadConfig<typeof batchHandlerABI, 'batchInfos', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"batchInvestInfos"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerBatchInvestInfos<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'batchInvestInfos'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof batchHandlerABI,
      'batchInvestInfos',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'batchInvestInfos',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'batchInvestInfos',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"batchWithdrawInfos"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerBatchWithdrawInfos<
  TSelectData = ReadContractResult<
    typeof batchHandlerABI,
    'batchWithdrawInfos'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof batchHandlerABI,
      'batchWithdrawInfos',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'batchWithdrawInfos',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'batchWithdrawInfos',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"claimableCoinAmounts"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerClaimableCoinAmounts<
  TSelectData = ReadContractResult<
    typeof batchHandlerABI,
    'claimableCoinAmounts'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof batchHandlerABI,
      'claimableCoinAmounts',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'claimableCoinAmounts',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'claimableCoinAmounts',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"claimableShareAmounts"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerClaimableShareAmounts<
  TSelectData = ReadContractResult<
    typeof batchHandlerABI,
    'claimableShareAmounts'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof batchHandlerABI,
      'claimableShareAmounts',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'claimableShareAmounts',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'claimableShareAmounts',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"getLastBatchId"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerGetLastBatchId<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'getLastBatchId'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof batchHandlerABI,
      'getLastBatchId',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'getLastBatchId',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'getLastBatchId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"getUserInvestInfo"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerGetUserInvestInfo<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'getUserInvestInfo'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof batchHandlerABI,
      'getUserInvestInfo',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'getUserInvestInfo',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'getUserInvestInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"getUserInvestTimes"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerGetUserInvestTimes<
  TSelectData = ReadContractResult<
    typeof batchHandlerABI,
    'getUserInvestTimes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof batchHandlerABI,
      'getUserInvestTimes',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'getUserInvestTimes',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'getUserInvestTimes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"getUserWithdrawInfo"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerGetUserWithdrawInfo<
  TSelectData = ReadContractResult<
    typeof batchHandlerABI,
    'getUserWithdrawInfo'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof batchHandlerABI,
      'getUserWithdrawInfo',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'getUserWithdrawInfo',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'getUserWithdrawInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"getUserWithdrawTimes"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerGetUserWithdrawTimes<
  TSelectData = ReadContractResult<
    typeof batchHandlerABI,
    'getUserWithdrawTimes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof batchHandlerABI,
      'getUserWithdrawTimes',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'getUserWithdrawTimes',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'getUserWithdrawTimes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"investInfos"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerInvestInfos<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'investInfos'>,
>(
  config: Omit<
    UseContractReadConfig<typeof batchHandlerABI, 'investInfos', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'investInfos',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'investInfos',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerOwner<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof batchHandlerABI, 'owner', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof batchHandlerABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"token"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerToken<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'token'>,
>(
  config: Omit<
    UseContractReadConfig<typeof batchHandlerABI, 'token', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<typeof batchHandlerABI, 'token', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"verifyAccount"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerVerifyAccount<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'verifyAccount'>,
>(
  config: Omit<
    UseContractReadConfig<typeof batchHandlerABI, 'verifyAccount', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'verifyAccount',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'verifyAccount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"wgvt"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerWgvt<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'wgvt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof batchHandlerABI, 'wgvt', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'wgvt',
    ...config,
  } as UseContractReadConfig<typeof batchHandlerABI, 'wgvt', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"withdrawInfos"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerWithdrawInfos<
  TSelectData = ReadContractResult<typeof batchHandlerABI, 'withdrawInfos'>,
>(
  config: Omit<
    UseContractReadConfig<typeof batchHandlerABI, 'withdrawInfos', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractRead({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'withdrawInfos',
    ...config,
  } as UseContractReadConfig<
    typeof batchHandlerABI,
    'withdrawInfos',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof batchHandlerABI, string>['abi'],
        TFunctionName
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof batchHandlerABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<TMode, typeof batchHandlerABI, TFunctionName>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"addWhiteList"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerAddWhiteList<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof batchHandlerABI,
          'addWhiteList'
        >['abi'],
        'addWhiteList'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addWhiteList'
      }
    : UseContractWriteConfig<TMode, typeof batchHandlerABI, 'addWhiteList'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addWhiteList'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'addWhiteList'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'addWhiteList',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"cancelInvest"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerCancelInvest<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof batchHandlerABI,
          'cancelInvest'
        >['abi'],
        'cancelInvest'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'cancelInvest'
      }
    : UseContractWriteConfig<TMode, typeof batchHandlerABI, 'cancelInvest'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'cancelInvest'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'cancelInvest'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'cancelInvest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"canelWithdraw"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerCanelWithdraw<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof batchHandlerABI,
          'canelWithdraw'
        >['abi'],
        'canelWithdraw'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'canelWithdraw'
      }
    : UseContractWriteConfig<TMode, typeof batchHandlerABI, 'canelWithdraw'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'canelWithdraw'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'canelWithdraw'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'canelWithdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"claimCoin"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerClaimCoin<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof batchHandlerABI, 'claimCoin'>['abi'],
        'claimCoin'
      > & { address?: Address; chainId?: TChainId; functionName?: 'claimCoin' }
    : UseContractWriteConfig<TMode, typeof batchHandlerABI, 'claimCoin'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'claimCoin'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'claimCoin'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'claimCoin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"claimShare"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerClaimShare<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof batchHandlerABI, 'claimShare'>['abi'],
        'claimShare'
      > & { address?: Address; chainId?: TChainId; functionName?: 'claimShare' }
    : UseContractWriteConfig<TMode, typeof batchHandlerABI, 'claimShare'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'claimShare'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'claimShare'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'claimShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"createNewBatch"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerCreateNewBatch<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof batchHandlerABI,
          'createNewBatch'
        >['abi'],
        'createNewBatch'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'createNewBatch'
      }
    : UseContractWriteConfig<
        TMode,
        typeof batchHandlerABI,
        'createNewBatch'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createNewBatch'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'createNewBatch'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'createNewBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"deposit"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerDeposit<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof batchHandlerABI, 'deposit'>['abi'],
        'deposit'
      > & { address?: Address; chainId?: TChainId; functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof batchHandlerABI, 'deposit'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'deposit'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'deposit'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"removeWhiteList"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerRemoveWhiteList<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof batchHandlerABI,
          'removeWhiteList'
        >['abi'],
        'removeWhiteList'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'removeWhiteList'
      }
    : UseContractWriteConfig<
        TMode,
        typeof batchHandlerABI,
        'removeWhiteList'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'removeWhiteList'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'removeWhiteList'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'removeWhiteList',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerRenounceOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof batchHandlerABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        TMode,
        typeof batchHandlerABI,
        'renounceOwnership'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'renounceOwnership'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerTransferOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof batchHandlerABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        TMode,
        typeof batchHandlerABI,
        'transferOwnership'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'transferOwnership'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"updateBatchDuration"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerUpdateBatchDuration<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof batchHandlerABI,
          'updateBatchDuration'
        >['abi'],
        'updateBatchDuration'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'updateBatchDuration'
      }
    : UseContractWriteConfig<
        TMode,
        typeof batchHandlerABI,
        'updateBatchDuration'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'updateBatchDuration'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'updateBatchDuration'>(
    {
      abi: batchHandlerABI,
      address: batchHandlerAddress[4002],
      functionName: 'updateBatchDuration',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"withdraw"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerWithdraw<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof batchHandlerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof batchHandlerABI, 'withdraw'>['abi'],
        'withdraw'
      > & { address?: Address; chainId?: TChainId; functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof batchHandlerABI, 'withdraw'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdraw'
      } = {} as any,
): ReturnType<typeof useContractWrite> {
  return useContractWrite<TMode, typeof batchHandlerABI, 'withdraw'>({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchHandlerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"addWhiteList"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerAddWhiteList(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'addWhiteList'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'addWhiteList',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchHandlerABI, 'addWhiteList'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"cancelInvest"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerCancelInvest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'cancelInvest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'cancelInvest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchHandlerABI, 'cancelInvest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"canelWithdraw"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerCanelWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'canelWithdraw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'canelWithdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchHandlerABI, 'canelWithdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"claimCoin"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerClaimCoin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'claimCoin'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'claimCoin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchHandlerABI, 'claimCoin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"claimShare"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerClaimShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'claimShare'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'claimShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchHandlerABI, 'claimShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"createNewBatch"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerCreateNewBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'createNewBatch'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'createNewBatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchHandlerABI, 'createNewBatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"deposit"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'deposit'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchHandlerABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"removeWhiteList"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerRemoveWhiteList(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'removeWhiteList'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'removeWhiteList',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchHandlerABI, 'removeWhiteList'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof batchHandlerABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof batchHandlerABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"updateBatchDuration"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerUpdateBatchDuration(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof batchHandlerABI,
      'updateBatchDuration'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'updateBatchDuration',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof batchHandlerABI,
    'updateBatchDuration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchHandlerABI}__ and `functionName` set to `"withdraw"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function usePrepareBatchHandlerWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchHandlerABI, 'withdraw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchHandlerABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchHandlerABI}__.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof batchHandlerABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractEvent({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    ...config,
  } as UseContractEventConfig<typeof batchHandlerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchHandlerABI}__ and `eventName` set to `"CreateNewBatch"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerCreateNewBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof batchHandlerABI, 'CreateNewBatch'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractEvent({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    eventName: 'CreateNewBatch',
    ...config,
  } as UseContractEventConfig<typeof batchHandlerABI, 'CreateNewBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchHandlerABI}__ and `eventName` set to `"Deposit"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof batchHandlerABI, 'Deposit'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractEvent({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof batchHandlerABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchHandlerABI}__ and `eventName` set to `"DepositCancelled"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerDepositCancelledEvent(
  config: Omit<
    UseContractEventConfig<typeof batchHandlerABI, 'DepositCancelled'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractEvent({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    eventName: 'DepositCancelled',
    ...config,
  } as UseContractEventConfig<typeof batchHandlerABI, 'DepositCancelled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchHandlerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof batchHandlerABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractEvent({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof batchHandlerABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchHandlerABI}__ and `eventName` set to `"UpdateBatchDuration"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerUpdateBatchDurationEvent(
  config: Omit<
    UseContractEventConfig<typeof batchHandlerABI, 'UpdateBatchDuration'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractEvent({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    eventName: 'UpdateBatchDuration',
    ...config,
  } as UseContractEventConfig<typeof batchHandlerABI, 'UpdateBatchDuration'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchHandlerABI}__ and `eventName` set to `"WhiteListAdded"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerWhiteListAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof batchHandlerABI, 'WhiteListAdded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractEvent({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    eventName: 'WhiteListAdded',
    ...config,
  } as UseContractEventConfig<typeof batchHandlerABI, 'WhiteListAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchHandlerABI}__ and `eventName` set to `"WhiteListRemoved"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerWhiteListRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof batchHandlerABI, 'WhiteListRemoved'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractEvent({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    eventName: 'WhiteListRemoved',
    ...config,
  } as UseContractEventConfig<typeof batchHandlerABI, 'WhiteListRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchHandlerABI}__ and `eventName` set to `"Withdraw"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof batchHandlerABI, 'Withdraw'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractEvent({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<typeof batchHandlerABI, 'Withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchHandlerABI}__ and `eventName` set to `"WithdrawCancelled"`.
 *
 * [__View Contract on Fantom Testnet Ftm Scan__](https://testnet.ftmscan.com/address/0x0fD2ffFe0B6a03b314eaf79fD009b802bbd4F312)
 */
export function useBatchHandlerWithdrawCancelledEvent(
  config: Omit<
    UseContractEventConfig<typeof batchHandlerABI, 'WithdrawCancelled'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof batchHandlerAddress } = {} as any,
) {
  return useContractEvent({
    abi: batchHandlerABI,
    address: batchHandlerAddress[4002],
    eventName: 'WithdrawCancelled',
    ...config,
  } as UseContractEventConfig<typeof batchHandlerABI, 'WithdrawCancelled'>)
}
